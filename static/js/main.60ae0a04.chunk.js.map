{"version":3,"sources":["components/ExpressionInput/index.js","components/Keyboard/index.js","actions/index.js","constants/index.js","App.js","serviceWorker.js","utilts/calcTime.js","reducers/constants.js","reducers/mainInput.js","reducers/index.js","store.js","index.js"],"names":["InputContainer","styled","div","InputValue","PreResult","useSelector","s","mainInput","inputValue","value","preResult","BUTTONS_LEFT","BUTTONS_RIGHT","Keyboard","StyledButton","button","LeftColumn","Row","RightColumn","mapButtons","btnValue","dispatch","key","onClick","type","keyValue","useDispatch","map","buttonsRow","Main","ExpressionInputContainer","KeyboardContainer","App","ExpressionInput","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","errorMessage","timeExpression","exp","replace","length","expression","slice","timeValue","split","String","toString","calculatedValue","Function","Infinity","number","hours","minutes","Math","round","numberToTime","defaultState","combineReducers","action","newInputValue","expResult","calcTime","includes","RegExp","undefined","createStore","reducers","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","store","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.60ae0a04.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\n\nconst InputContainer = styled.div`\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  flex-flow: column;\n  text-align: right;\n  padding: 0 10px;\n`;\n\nconst InputValue = styled.div`\n  height: 50px; // height if there's no value\n  font-size: 40px;\n  overflow: auto;\n`;\n\nconst PreResult = styled.div`\n  height: 30px; // height if there's no value\n  font-size: 25px; \n  overflow: auto;\n`;\n\nexport default () => {\n  const {value: inputValue, preResult} = useSelector(s => s.mainInput);\n  return (\n    <InputContainer>\n      <InputValue>{inputValue}</InputValue>\n      <PreResult>{preResult}</PreResult>\n    </InputContainer>\n  )\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useDispatch } from 'react-redux';\nimport { keyPressed } from '../../actions';\n\nconst BUTTONS_LEFT = [\n  ['7', '8', '9'],\n  ['4', '5', '6'],\n  ['1', '2', '3'],\n  ['.', '0', ':'],\n  ['='],\n]\n\nconst BUTTONS_RIGHT = ['C', 'DEL', 'รท', 'ร', '-', '+',]\n\nconst Keyboard = styled.div`\n  height: 100%;\n  display: flex;\n`\n\nconst StyledButton = styled.button`\n  background-color: rgba(0,0,0,0);\n  border: none;\n  height: 100%;\n  width: 100%;\n  font-size: 14pt;\n`;\n\n\nconst LeftColumn = styled.div`\n  background-color: #f7f7f7;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n`\n\nconst Row = styled.div`\n  display: flex;\n  height: 100%;\n`\n\nconst RightColumn = styled.div`\n  width: 100%;\n  flex-shrink: 3;\n  background-color: #26a69a;\n  display: flex;\n  flex-direction: column;\n`\n\nconst mapButtons = (btnValue, dispatch) => (\n  <StyledButton\n    key={btnValue}\n    onClick={() => dispatch(keyPressed(btnValue))}>\n    {btnValue}\n  </StyledButton>\n);\n\nexport default () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Keyboard>\n      <LeftColumn>\n        {\n          BUTTONS_LEFT.map(buttonsRow =>\n            <Row key={buttonsRow}>{buttonsRow.map(btnValue => mapButtons(btnValue, dispatch))}</Row>\n          )\n        }\n      </LeftColumn>\n      <RightColumn>\n        {BUTTONS_RIGHT.map(btnValue => mapButtons(btnValue, dispatch))}\n      </RightColumn>\n    </Keyboard>\n  )\n};\n","import {\n  KEY_PRESSED\n} from \"../constants\";\n\nexport const keyPressed = keyValue => ({\n  type: KEY_PRESSED,\n  keyValue,\n});\n\n","export const KEY_PRESSED = 'KEY_PRESSED';\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport ExpressionInput from './components/ExpressionInput';\nimport Keyboard from './components/Keyboard';\n\nconst Main = styled.div`\n  height: 100%;\n  width: 100%;\n`\n\nconst ExpressionInputContainer = styled.div`\n  height: 35%;\n`;\n\nconst KeyboardContainer = styled.div`\n  height: 65%;\n`\n\nfunction App() {\n  return (\n    <Main>\n      <ExpressionInputContainer>\n        <ExpressionInput/>\n      </ExpressionInputContainer>\n\n      <KeyboardContainer>\n        <Keyboard/>\n      </KeyboardContainer>\n    </Main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const errorMessage = {error: 'Error: Bad expression'};\n\nexport default timeExpression => {\n  if(!isCorrectExp(timeExpression)) {\n    return errorMessage;\n  }\n\n  const expression = timeExpression\n    .replace(/[รทร]/g, value => value === 'ร' ? '*' : '/') // รทร -> /*\n    .replace(/^0+[1-9]/g, value => value.slice(-1)) // 00123 -> 123 in start\n    .replace(/[^\\d]0[1-9]/g, value => value.replace('0', '')) // 123+00123 -> 123+123, in the middle of the expression\n\n    .replace(/\\d+:\\d*/g, value => { // time -> numbers\n      const timeValue = value.split(':');\n      timeValue[1] = String(timeValue[1] / 60);\n\n      return (+timeValue[0] + +timeValue[1]).toString();\n    });\n\n  try {\n    // eslint-disable-next-line  no-new-func\n    const calculatedValue = new Function('return ' + expression)();\n\n    return calculatedValue === Infinity ? errorMessage : numberToTime(calculatedValue);\n  } catch {\n    return errorMessage;\n  }\n}\n\nfunction isCorrectExp(exp) {\n  const newExp = exp.replace(/[^0-9:.รทร+-]/g, '') // leave only numbers and operators\n    .replace(/[-+รทร.:]{2,}/g, value => value[value.length - 1]) // ----++++ -> +\n\n  return newExp === exp;\n}\n\nfunction numberToTime(number) {\n  let [hours, minutes] = number.toString().split('.'); // 0 - hours, 1 - minutes\n\n  minutes = '0.' + minutes;\n  minutes = Math.round(minutes * 60); // 100 -> 60\n  minutes = minutes ? ('0' + minutes).slice(-2) : '00'  // 1 -> 01\n\n  return hours + ':' + minutes;\n}\n","export const ALL_OPERATORS = '-+รทร.:';\n\nexport const MINUS = '-';\n\nexport const KEY_CLEAR = 'C';\n\nexport const KEY_DEL = 'DEL';\n","import { KEY_PRESSED } from '../constants';\nimport calcTime from '../utilts/calcTime';\nimport { ALL_OPERATORS, KEY_CLEAR, KEY_DEL, MINUS } from './constants';\n\nconst defaultState = {\n  value: '',\n  preResult: null,\n};\n\nexport default (state = defaultState, action) => {\n  const {type, keyValue} = action;\n\n  if (type === KEY_PRESSED) {\n    let newInputValue;\n    let preResult;\n\n    switch (keyValue) {\n      case '=': {\n        const expResult = calcTime(state.value);\n        if(expResult.error) {\n          newInputValue = state.value;\n          preResult = expResult.error;\n        } else {\n          newInputValue = expResult;\n          preResult = '';\n        }\n\n        break;\n      }\n\n      case KEY_DEL: {\n        newInputValue = state.value.slice(0, -1);\n        break;\n      }\n\n      case KEY_CLEAR: {\n        newInputValue = '';\n        break;\n      }\n\n      default: {\n        // todo: move the conditions to functions\n\n        if (\n          // if keyValue is operator(except minus) and current expression is empty string or minus return current exp\n          (keyValue !== MINUS && ALL_OPERATORS.includes(keyValue) && (state.value === '' || state.value === MINUS))\n          // if latest two characters are operators and keyValue is operator return current value (e.g. 1234*-)\n          || (state.value.length >= 3 && state.value.slice(-2).match(new RegExp(`[${ALL_OPERATORS}]{2}`)) && ALL_OPERATORS.includes(keyValue))\n        ) {\n          newInputValue = state.value;\n        } else if (\n          // if both new key and current symbol are operators (except minus), use new\n          ALL_OPERATORS.includes(keyValue) && ALL_OPERATORS.includes(state.value.slice(-1))\n          // if latest operator is not a minus\n          && !(state.value.slice(-1) !== MINUS && keyValue === MINUS)\n        ) {\n          newInputValue = state.value.slice(0, -1) + keyValue;\n\n        } else {\n          newInputValue = state.value + keyValue;\n        }\n      }\n    }\n\n    // not just if(!preResult) since it can be empty string\n    if(preResult === undefined) {\n      const expResult = calcTime(newInputValue);\n      preResult = expResult.error ? '' : expResult;\n    }\n\n    return {\n      ...state,\n      value: newInputValue,\n      preResult,\n    };\n  }\n\n  return state;\n};\n","import { combineReducers } from 'redux';\nimport mainInput from './mainInput';\n\nexport default combineReducers({\n  mainInput,\n})\n","import { createStore } from 'redux';\nimport reducers from './reducers';\n\nexport default createStore(reducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}